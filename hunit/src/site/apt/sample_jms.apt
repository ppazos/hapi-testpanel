~~
~~ /*
~~ The contents of this file are subject to the Mozilla Public License Version 1.1
~~ (the "License"); you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at http://www.mozilla.org/MPL/
~~ Software distributed under the License is distributed on an "AS IS" basis,
~~ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the
~~ specific language governing rights and limitations under the License.
~~
~~ The Initial Developer of the Original Code is University Health Network. Copyright (C)
~~ 2001.  All Rights Reserved.
~~
~~ Alternatively, the contents of this file may be used under the terms of the
~~ GNU General Public License (the  "GPL"), in which case the provisions of the GPL are
~~ applicable instead of those above.  If you wish to allow use of your version of this
~~ file only under the terms of the GPL and not to allow others to use your version
~~ of this file under the MPL, indicate your decision by deleting  the provisions above
~~ and replace  them with the notice and other provisions required by the GPL License.
~~ If you do not delete the provisions above, a recipient may use your version of
~~ this file under either the MPL or the GPL.
~~ */
~~
Sending and Receiving messages using JMS

* Introduction

  The following example outlines the sending and receiving of JMS messages. At UHN,
  this is used to test message translation modules in our JavaCAPS interface
  engine without needing to deploy MLLP HL7 endpoints.

  The following example is an a unit test developed to test a mapping of an OMI message
  {{{examples/sample_jms.xml}into an SIU message}}.

  The JMS interface definition is as follows:

+---------+
    <hu:jmsInterface id="from_ORM_WCH_ccRIS">
        <hu:connection_factory>com.stc.jms.client.STCTopicConnectionFactory</hu:connection_factory>
        <hu:connection_factory_constructor_arg type="java.lang.String" value="jcapsdev"/>
        <hu:connection_factory_constructor_arg type="int" value="18907"/>
        <hu:topic_name>tp_In_ORM_WCH_ccRIS</hu:topic_name>
        <hu:user_name>Administrator</hu:user_name>
        <hu:password>PASSWORD</hu:password>
        <hu:message_property type="java.lang.String" name="SOURCE_SYSTEM" value="WCH_ccRIS"/>
        <hu:message_property type="java.lang.String" name="SOURCE_INTERFACE" value="ORM"/>
    </hu:jmsInterface>
+---------+

  Note that the connection factory is specified, as well as the two constructor
  arguments required to initialize it. In the future, we hope to support
  JNDI lookups and other ways of initializing the connection factory.

  The "topic_name" tag specifies the topic to send messages to. Alternately, the
  "queue_name" tag may be used if it is a queue.

  We also attach two message properties to each sent message, as we have code
  within the engine which looks for this.