/**
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.mozilla.org/MPL/
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the
 * specific language governing rights and limitations under the License.
 *
 * The Initial Developer of the Original Code is University Health Network. Copyright (C)
 * 2001.  All Rights Reserved.
 *
 * Alternatively, the contents of this file may be used under the terms of the
 * GNU General Public License (the  "GPL"), in which case the provisions of the GPL are
 * applicable instead of those above.  If you wish to allow use of your version of this
 * file only under the terms of the GPL and not to allow others to use your version
 * of this file under the MPL, indicate your decision by deleting  the provisions above
 * and replace  them with the notice and other provisions required by the GPL License.
 * If you do not delete the provisions above, a recipient may use your version of
 * this file under either the MPL or the GPL.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Hl7V2MessageForm.java
 *
 * Created on 7-Oct-2009, 9:54:02 PM
 */
package ca.uhn.hunit.swing.ui.msg;

import ca.uhn.hunit.l10n.Colours;
import ca.uhn.hunit.swing.controller.ctx.AbstractMessageEditorController;
import ca.uhn.hunit.swing.ui.AbstractContextForm;
import java.beans.PropertyVetoException;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;

/**
 *
 * @author James
 */
public class MessageForm extends AbstractContextForm<AbstractMessageEditorController<?, ?>> {

    private static final long serialVersionUID = 1;

    /** Creates new form Hl7V2MessageForm */
    public MessageForm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        myMessageTextArea = new javax.swing.JTextArea();

        myMessageTextArea.setColumns(20);
        myMessageTextArea.setRows(5);
        jScrollPane1.setViewportView(myMessageTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea myMessageTextArea;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setController(final AbstractMessageEditorController<?, ?> theController) {
        myMessageTextArea.setText(theController.getMessage().getSourceMessage());
        myMessageTextArea.getDocument().addUndoableEditListener(new UndoableEditListener() {

            public void undoableEditHappened(UndoableEditEvent e) {
                try {
                    theController.getMessage().setSourceMessage(myMessageTextArea.getText());
                    myMessageTextArea.setBackground(Colours.getTextFieldOk());
                } catch (PropertyVetoException ex) {
                    myMessageTextArea.setBackground(Colours.getTextFieldError());
                }
            }
        });
    }

    @Override
    public void tearDown() {
        // nothing
    }
}
