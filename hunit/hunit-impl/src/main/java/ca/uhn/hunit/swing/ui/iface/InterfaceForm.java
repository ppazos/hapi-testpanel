/**
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.mozilla.org/MPL/
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the
 * specific language governing rights and limitations under the License.
 *
 * The Initial Developer of the Original Code is University Health Network. Copyright (C)
 * 2001.  All Rights Reserved.
 *
 * Alternatively, the contents of this file may be used under the terms of the
 * GNU General Public License (the  "GPL"), in which case the provisions of the GPL are
 * applicable instead of those above.  If you wish to allow use of your version of this
 * file only under the terms of the GPL and not to allow others to use your version
 * of this file under the MPL, indicate your decision by deleting  the provisions above
 * and replace  them with the notice and other provisions required by the GPL License.
 * If you do not delete the provisions above, a recipient may use your version of
 * this file under either the MPL or the GPL.
 */
package ca.uhn.hunit.swing.ui.iface;

import ca.uhn.hunit.iface.AbstractInterface;
import ca.uhn.hunit.l10n.Colours;
import ca.uhn.hunit.swing.controller.ctx.AbstractInterfaceEditorContextController;
import ca.uhn.hunit.swing.ui.AbstractContextForm;
import java.beans.PropertyVetoException;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author James
 */
public class InterfaceForm extends AbstractContextForm<AbstractInterfaceEditorContextController<?, ?>> {

    private static final long serialVersionUID = 1;
    private AbstractInterfaceEditorContextController<?, ?> myController;

    /** Creates new form InterfaceForm */
    public InterfaceForm() {
        initComponents();
    }

    private void updateId() {
        try {
            myController.setId(myIdTextBox.getText());
            myIdTextBox.setBackground(Colours.getTextFieldOk());
        } catch (PropertyVetoException ex) {
            myIdTextBox.setBackground(Colours.getTextFieldError());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        myIdTextBox = new javax.swing.JTextField();
        myAutostartCheckBox = new javax.swing.JCheckBox();
        myClearOnStartupCheckbox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        myClearForMillisSpinner = new javax.swing.JSpinner();
        myClearForMillisSpinner.setModel(new SpinnerNumberModel());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setLabelFor(myIdTextBox);
        jLabel1.setText("ID");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setLabelFor(myAutostartCheckBox);
        jLabel2.setText("Autostart");

        myIdTextBox.setText("jTextField1");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setLabelFor(myAutostartCheckBox);
        jLabel3.setText("Clear On Startup");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Clear For Millis");

        myClearForMillisSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(100)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(myClearOnStartupCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(myClearForMillisSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                    .addComponent(myAutostartCheckBox)
                    .addComponent(myIdTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(myIdTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                    .addComponent(myAutostartCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addComponent(myClearForMillisSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(myClearOnStartupCheckbox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox myAutostartCheckBox;
    private javax.swing.JSpinner myClearForMillisSpinner;
    private javax.swing.JCheckBox myClearOnStartupCheckbox;
    private javax.swing.JTextField myIdTextBox;
    // End of variables declaration//GEN-END:variables

    public void setValues() {
        final AbstractInterface model = myController.getModel();
        myAutostartCheckBox.setSelected(model.isAutostart());
        myIdTextBox.setText(model.getId());
        myClearForMillisSpinner.setValue(model.getClearMillis());
        myClearOnStartupCheckbox.setSelected(model.isClear());

        if (model.isSupportsClear() == false) {
            myClearForMillisSpinner.setEnabled(false);
            myClearOnStartupCheckbox.setEnabled(false);
        }
    }

    @Override
    public void setController(AbstractInterfaceEditorContextController<?, ?> theController) {
        this.myController = theController;
        setValues();

        myIdTextBox.getDocument().addDocumentListener(new DocumentListener() {
        // <editor-fold defaultstate="collapsed" desc="Listener">

            public void insertUpdate(DocumentEvent e) {
                updateId();
            }

            public void removeUpdate(DocumentEvent e) {
                updateId();
            }

            public void changedUpdate(DocumentEvent e) {
                updateId();
            }
        // </editor-fold>
        });

        myAutostartCheckBox.getModel().addChangeListener(new ChangeListener() {
        // <editor-fold defaultstate="collapsed" desc="Listener">
            public void stateChanged(ChangeEvent e) {
                myController.setAutostart(myAutostartCheckBox.isSelected());
            }
        // </editor-fold>
        });

        myClearForMillisSpinner.getModel().addChangeListener(new ChangeListener() {
        // <editor-fold defaultstate="collapsed" desc="Listener">
            public void stateChanged(ChangeEvent e) {
                myController.setClearMillis(((Number)myClearForMillisSpinner.getValue()).intValue());
            }
        // </editor-fold>
        });

        myClearOnStartupCheckbox.getModel().addChangeListener(new ChangeListener() {
        // <editor-fold defaultstate="collapsed" desc="Listener">
            public void stateChanged(ChangeEvent e) {
                myController.setClear(myClearOnStartupCheckbox.isSelected());
            }
        // </editor-fold>
        });

    }

    @Override
    public void tearDown() {
        // nothing
    }
}
