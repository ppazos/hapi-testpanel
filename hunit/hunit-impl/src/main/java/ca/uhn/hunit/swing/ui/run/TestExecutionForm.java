/**
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.mozilla.org/MPL/
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the
 * specific language governing rights and limitations under the License.
 *
 * The Initial Developer of the Original Code is University Health Network. Copyright (C)
 * 2001.  All Rights Reserved.
 *
 * Alternatively, the contents of this file may be used under the terms of the
 * GNU General Public License (the  "GPL"), in which case the provisions of the GPL are
 * applicable instead of those above.  If you wish to allow use of your version of this
 * file only under the terms of the GPL and not to allow others to use your version
 * of this file under the MPL, indicate your decision by deleting  the provisions above
 * and replace  them with the notice and other provisions required by the GPL License.
 * If you do not delete the provisions above, a recipient may use your version of
 * this file under either the MPL or the GPL.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestExecutionForm.java
 *
 * Created on 20-Oct-2009, 9:55:41 PM
 */

package ca.uhn.hunit.swing.ui.run;

import ca.uhn.hunit.ex.IncorrectMessageReceivedException;
import ca.uhn.hunit.ex.TestFailureException;
import ca.uhn.hunit.ex.UnexpectedMessageException;
import ca.uhn.hunit.ex.UnexpectedTestFailureException;
import ca.uhn.hunit.swing.controller.ctx.BatteryExecutionContextController;
import ca.uhn.hunit.swing.ui.AbstractContextForm;
import ca.uhn.hunit.swing.ui.ImageFactory;
import ca.uhn.hunit.test.TestImpl;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.basic.BasicSplitPaneUI;

/**
 *
 * @author James
 */
public class TestExecutionForm extends AbstractContextForm<BatteryExecutionContextController> {

    private static final long serialVersionUID = 1L;
    private BatteryExecutionContextController myController;

    /** Creates new form TestExecutionForm */
    public TestExecutionForm() {
        initComponents();

        myLogTable.setDefaultRenderer(Object.class, new LogTableCellRenderer());
        myTestsTable.setDefaultRenderer(Object.class, new TestExecutionTableCellRenderer());
        ((BasicSplitPaneUI) mySplitPane.getUI()).getDivider().setBorder(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mySplitPane = new javax.swing.JSplitPane();
        myTestsPanel = new javax.swing.JPanel();
        myTestsScrollPane = new javax.swing.JScrollPane();
        myTestsTable = new javax.swing.JTable();
        myTabbedPane = new javax.swing.JTabbedPane();
        myLogPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        myLogScrollPane = new javax.swing.JScrollPane();
        myLogTable = new javax.swing.JTable();

        mySplitPane.setBorder(null);
        mySplitPane.setDividerLocation(150);
        mySplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mySplitPane.setResizeWeight(0.5);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ca/uhn/hunit/l10n/UiStrings"); // NOI18N
        myTestsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("execution.tests"))); // NOI18N

        myTestsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        myTestsTable.setFillsViewportHeight(true);
        myTestsTable.setShowHorizontalLines(false);
        myTestsTable.setShowVerticalLines(false);
        myTestsScrollPane.setViewportView(myTestsTable);

        javax.swing.GroupLayout myTestsPanelLayout = new javax.swing.GroupLayout(myTestsPanel);
        myTestsPanel.setLayout(myTestsPanelLayout);
        myTestsPanelLayout.setHorizontalGroup(
            myTestsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myTestsPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(myTestsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        myTestsPanelLayout.setVerticalGroup(
            myTestsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myTestsPanelLayout.createSequentialGroup()
                .addComponent(myTestsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        mySplitPane.setTopComponent(myTestsPanel);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText(bundle.getString("execution.log.level")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        myLogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        myLogTable.setFillsViewportHeight(true);
        myLogTable.setShowHorizontalLines(false);
        myLogTable.setShowVerticalLines(false);
        myLogScrollPane.setViewportView(myLogTable);

        javax.swing.GroupLayout myLogPanelLayout = new javax.swing.GroupLayout(myLogPanel);
        myLogPanel.setLayout(myLogPanelLayout);
        myLogPanelLayout.setHorizontalGroup(
            myLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myLogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(myLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(myLogScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                    .addGroup(myLogPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        myLogPanelLayout.setVerticalGroup(
            myLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myLogPanelLayout.createSequentialGroup()
                .addGroup(myLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(myLogScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addContainerGap())
        );

        myTabbedPane.addTab(bundle.getString("execution.log"), new javax.swing.ImageIcon(getClass().getResource("/ca/uhn/hunit/ui/resources/images/tab_log.png")), myLogPanel); // NOI18N

        mySplitPane.setRightComponent(myTabbedPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mySplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mySplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel myLogPanel;
    private javax.swing.JScrollPane myLogScrollPane;
    private javax.swing.JTable myLogTable;
    private javax.swing.JSplitPane mySplitPane;
    private javax.swing.JTabbedPane myTabbedPane;
    private javax.swing.JPanel myTestsPanel;
    private javax.swing.JScrollPane myTestsScrollPane;
    private javax.swing.JTable myTestsTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setController(BatteryExecutionContextController theController) {
        myController = theController;
        myTestsTable.setModel(myController.getExecutionTableModel());
        myLogTable.setModel(myController.getLogTableModel());

        myLogTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        myLogTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        myLogTable.getColumnModel().getColumn(2).setPreferredWidth(120);
        myLogTable.getColumnModel().getColumn(3).setPreferredWidth(300);
        myLogTable.doLayout();

        myTestsTable.getColumnModel().getColumn(0).setPreferredWidth(100);
//        myTestsTable.getColumnModel().getColumn(0).setMinWidth(100);
//        myTestsTable.getColumnModel().getColumn(0).setMaxWidth(100);
        myTestsTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        myTestsTable.doLayout();

        myController.getLogTableModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int scrollMax = myLogScrollPane.getVerticalScrollBar().getMaximum();
                myLogScrollPane.getVerticalScrollBar().setValue(scrollMax);
            }
        });

    }

    public void addTestFailure(TestImpl theTest, TestFailureException theEx) {
        JPanel tab = null;
        if (theEx instanceof UnexpectedTestFailureException) {
            tab = new FailureUnexpectedTestFailureTab((UnexpectedTestFailureException) theEx);
        } else if (theEx instanceof IncorrectMessageReceivedException) {
            tab = new FailureIncorrectMessageReceivedTab((IncorrectMessageReceivedException) theEx);
        } else if (theEx instanceof UnexpectedMessageException) {
            tab = new FailureIncorrectMessageReceivedTab((UnexpectedMessageException) theEx);
        }

        if (tab == null) {
            tab = new FailureUnexpectedTestFailureTab(new UnexpectedTestFailureException(theEx));
        }

        myTabbedPane.addTab(theTest.getName(), ImageFactory.getTestFailed(), tab);
    }

    @Override
    public void tearDown() {
        // nothing
    }

}
