/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JavaCallableInterfaceForm.java
 *
 * Created on 28-Mar-2010, 6:02:22 PM
 */

package ca.uhn.hunit.swing.ui.iface;

import ca.uhn.hunit.api.IJavaCallableInterface;
import ca.uhn.hunit.ex.ConfigurationException;
import ca.uhn.hunit.iface.JavaCallableInterfaceImpl;
import ca.uhn.hunit.swing.controller.ctx.JavaCallableInterfaceEditorContextController;
import ca.uhn.hunit.swing.ui.AbstractContextForm;
import ca.uhn.hunit.swing.ui.DialogUtil;
import ca.uhn.hunit.swing.ui.util.UiUtil;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.beans.PropertyVetoException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author James
 */
public class JavaCallableInterfaceEditorForm extends AbstractContextForm<JavaCallableInterfaceEditorContextController> {
    private JavaCallableInterfaceImpl myModel;

    /** Creates new form JavaCallableInterfaceForm */
    public JavaCallableInterfaceEditorForm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myInterfacePropertiesBorder = new javax.swing.JPanel();
        myInterfaceForm = new ca.uhn.hunit.swing.ui.iface.InterfaceForm();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        myClassTextField = new javax.swing.JTextField();
        myNewInstanceForEachTestjCheckBox = new javax.swing.JCheckBox();

        myInterfacePropertiesBorder.setBorder(javax.swing.BorderFactory.createTitledBorder("Interface Properties"));

        javax.swing.GroupLayout myInterfacePropertiesBorderLayout = new javax.swing.GroupLayout(myInterfacePropertiesBorder);
        myInterfacePropertiesBorder.setLayout(myInterfacePropertiesBorderLayout);
        myInterfacePropertiesBorderLayout.setHorizontalGroup(
            myInterfacePropertiesBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(myInterfaceForm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
        );
        myInterfacePropertiesBorderLayout.setVerticalGroup(
            myInterfacePropertiesBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myInterfacePropertiesBorderLayout.createSequentialGroup()
                .addComponent(myInterfaceForm, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ca/uhn/hunit/l10n/UiStrings"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("interface.javacallable.title"))); // NOI18N

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText(bundle.getString("interface.javacallable.class")); // NOI18N

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText(bundle.getString("interface.javacallable.new_instance")); // NOI18N

        myClassTextField.setText("jTextField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(myClassTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addComponent(myNewInstanceForEachTestjCheckBox))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(myClassTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(myNewInstanceForEachTestjCheckBox))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(myInterfacePropertiesBorder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(myInterfacePropertiesBorder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField myClassTextField;
    private ca.uhn.hunit.swing.ui.iface.InterfaceForm myInterfaceForm;
    private javax.swing.JPanel myInterfacePropertiesBorder;
    private javax.swing.JCheckBox myNewInstanceForEachTestjCheckBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setController(final JavaCallableInterfaceEditorContextController theController) {
        myModel = theController.getModel();
        myInterfaceForm.setController(theController);

        Class<IJavaCallableInterface> clazz = myModel.getClazz();
        if (clazz != null) {
            myClassTextField.setText(clazz.getName());
            myClassTextField.setBackground(UiUtil.getOkBackgroundColor());
        } else {
            myClassTextField.setText("");
            myClassTextField.setBackground(UiUtil.getErrorBackgroundColor());
        }
        myClassTextField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                // nothing
            }

            @Override
            public void focusLost(FocusEvent e) {
                try {
                    theController.getModel().setClazz(myClassTextField.getText());
                    myClassTextField.setBackground(UiUtil.getOkBackgroundColor());
                } catch (PropertyVetoException ex) {
                    myClassTextField.setBackground(UiUtil.getErrorBackgroundColor());
                    DialogUtil.showErrorMessage(JavaCallableInterfaceEditorForm.this, ex.getMessage());
                }
            }
        });
        
        myNewInstanceForEachTestjCheckBox.setSelected(myModel.isNewInstanceForEachTest());
        myNewInstanceForEachTestjCheckBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                theController.getModel().setNewInstanceForEachTest(myNewInstanceForEachTestjCheckBox.isSelected());
            }
        });
    }

    @Override
    public void tearDown() {
        myInterfaceForm.tearDown();
    }

}
