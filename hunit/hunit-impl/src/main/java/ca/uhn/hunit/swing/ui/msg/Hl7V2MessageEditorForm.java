/**
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.mozilla.org/MPL/
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the
 * specific language governing rights and limitations under the License.
 *
 * The Initial Developer of the Original Code is University Health Network. Copyright (C)
 * 2001.  All Rights Reserved.
 *
 * Alternatively, the contents of this file may be used under the terms of the
 * GNU General Public License (the  "GPL"), in which case the provisions of the GPL are
 * applicable instead of those above.  If you wish to allow use of your version of this
 * file only under the terms of the GPL and not to allow others to use your version
 * of this file under the MPL, indicate your decision by deleting  the provisions above
 * and replace  them with the notice and other provisions required by the GPL License.
 * If you do not delete the provisions above, a recipient may use your version of
 * this file under either the MPL or the GPL.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Hl7V2MessageEditorForm.java
 *
 * Created on 8-Oct-2009, 8:39:14 AM
 */
package ca.uhn.hunit.swing.ui.msg;

import ca.uhn.hl7v2.model.Message;
import ca.uhn.hunit.iface.TestMessage;
import ca.uhn.hunit.msg.Hl7V2MessageImpl;
import ca.uhn.hunit.swing.controller.ctx.Hl7V2MessageEditorController;
import ca.uhn.hunit.swing.ui.AbstractContextForm;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;


/**
 *
 * @author James
 */
public class Hl7V2MessageEditorForm extends AbstractContextForm<Hl7V2MessageEditorController> {

    private static final long serialVersionUID = 1;
    private Hl7V2TreePanel myTreePanel;
    private MySourceMessagePropertyChangeListener mySourceMessagePropertyChangeListener;
    private Hl7V2MessageEditorController myController;

    /** Creates new form Hl7V2MessageEditorForm */
    public Hl7V2MessageEditorForm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        mySplitPane = new javax.swing.JSplitPane();
        myMessageForm = new ca.uhn.hunit.swing.ui.msg.MessageForm();
        myTreeScrollPane = new javax.swing.JScrollPane();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ca/uhn/hunit/l10n/UiStrings"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("messageeditor.message"))); // NOI18N

        mySplitPane.setDividerLocation(150);
        mySplitPane.setResizeWeight(0.3);
        mySplitPane.setLeftComponent(myMessageForm);
        mySplitPane.setRightComponent(myTreeScrollPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 506, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(mySplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(5, 5, 5)
                    .addComponent(mySplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private ca.uhn.hunit.swing.ui.msg.MessageForm myMessageForm;
    private javax.swing.JSplitPane mySplitPane;
    private javax.swing.JScrollPane myTreeScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setController(Hl7V2MessageEditorController theController) {
        myController = theController;
        myTreePanel = new Hl7V2TreePanel();
        myTreeScrollPane.setViewportView(myTreePanel);

        myMessageForm.setController(theController);

        mySourceMessagePropertyChangeListener = new MySourceMessagePropertyChangeListener();
        myController.getMessage().addPropertyChangeListener(Hl7V2MessageImpl.SOURCE_MESSAGE_PROPERTY, mySourceMessagePropertyChangeListener);
        updateTreeMessage();
    }

    @Override
    public void tearDown() {
        myMessageForm.tearDown();
        myController.getMessage().removePropertyChangeListener(Hl7V2MessageImpl.SOURCE_MESSAGE_PROPERTY, mySourceMessagePropertyChangeListener);
    }

    private void updateTreeMessage() {
        final Hl7V2MessageImpl message = myController.getMessage();
        final TestMessage<Message> testMessage = message.getTestMessage();
        final Message parsedMessage = testMessage.getParsedMessage();
        myTreePanel.setMessage(parsedMessage);
        this.validate();
    }

    private class MySourceMessagePropertyChangeListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            updateTreeMessage();
        }
    }
}
