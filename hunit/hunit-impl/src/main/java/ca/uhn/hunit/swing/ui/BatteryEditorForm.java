/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BatteryEditorForm.java
 *
 * Created on 15-Nov-2009, 4:36:27 PM
 */
package ca.uhn.hunit.swing.ui;

import ca.uhn.hunit.l10n.Colours;
import ca.uhn.hunit.l10n.Strings;
import ca.uhn.hunit.swing.controller.ctx.BatteryEditorContextController;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.lang.StringUtils;

/**
 *
 * @author James
 */
public class BatteryEditorForm extends AbstractContextForm<BatteryEditorContextController> {

    private BatteryEditorContextController myController;
    private final MyPropertyChangeListener myPropertyChangeListener = new MyPropertyChangeListener();

    /** Creates new form BatteryEditorForm */
    public BatteryEditorForm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        myBatteryNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        myFilenameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ca/uhn/hunit/l10n/UiStrings"); // NOI18N
        jLabel1.setText(bundle.getString("batteryeditor.name")); // NOI18N

        myBatteryNameTextField.setText("jTextField1");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText(bundle.getString("batteryeditor.file")); // NOI18N

        myFilenameTextField.setText("jTextField2");
        myFilenameTextField.setOpaque(false);

        jLabel3.setText(bundle.getString("batteryeditor.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(myBatteryNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(myFilenameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(myBatteryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(myFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField myBatteryNameTextField;
    private javax.swing.JTextField myFilenameTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * {@inheritDoc }
     */
    @Override
    public void setController(BatteryEditorContextController theController) {
        myController = theController;

        updateFilename();
        myController.getBattery().addPropertyChangeListener(TOOL_TIP_TEXT_KEY, myPropertyChangeListener);

        updateBatteryName();
        myBatteryNameTextField.getDocument().addDocumentListener(new MyBatteryNameDocumentListener());
    }

    /**
     * {@inheritDoc }
     */
    @Override
    public void tearDown() {
        myController.getBattery().removePropertyChangeListener(TOOL_TIP_TEXT_KEY, myPropertyChangeListener);
    }

    private void updateBatteryName() {
        String name = myController.getBattery().getName();
        if (StringUtils.isBlank(name)) {
            myBatteryNameTextField.setBackground(Colours.getTextFieldError());
            name = "";
        } else {
            myBatteryNameTextField.setBackground(Colours.getTextFieldOk());
        }

        myBatteryNameTextField.setText(name);
    }

    private void updateFilename() {
        File file = myController.getBattery().getFile();
        String text;
        if (file == null) {
            text = Strings.getMessage("batteryeditor.unsaved");
        } else {
            text = file.getPath();
        }
        myFilenameTextField.setText(text);
    }

    private class MyPropertyChangeListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            updateFilename();
        }
    }

    private class MyBatteryNameDocumentListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            myController.getBattery().setName(myBatteryNameTextField.getText());
            updateBatteryName();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            myController.getBattery().setName(myBatteryNameTextField.getText());
            updateBatteryName();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            myController.getBattery().setName(myBatteryNameTextField.getText());
            updateBatteryName();
        }
    }
}
